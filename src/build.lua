---@type Context
local context = ...

for _, node in ipairs(context:search(context.path, 'motor/3rdparty/**/mak/build.lua')) do
    context:recurse(node:path_from(context.path))
end

local zlib = context:get_generator_by_name('motor.3rdparty.system.zlib')
local minizip = context:get_generator_by_name('motor.3rdparty.system.minizip')

local config = Motor.library('motor.config', 'motor')
local kernel = Motor.library('motor.kernel', 'motor')
                    :add_public_dependency(config)
for _, include in ipairs(context:search(context.path, 'motor/kernel/api.cpu', true)) do
    kernel:add_public_include(include)
end

local minitl = Motor.library('motor.minitl', 'motor')
                    :add_public_dependency(config)
                    :add_public_dependency(kernel)
local core = Motor.library('motor.core', 'motor')
                  :add_public_dependency(config)
                  :add_public_dependency(kernel)
                  :add_public_dependency(minitl)
local meta = Motor.library('motor.meta', 'motor')
                  :add_public_dependency(config)
                  :add_public_dependency(kernel)
                  :add_public_dependency(minitl)
                  :add_public_dependency(core)
                  :add_internal_dependency(zlib)
local filesystem = Motor.library('motor.filesystem', 'motor')
                        :add_public_dependency(config)
                        :add_public_dependency(kernel)
                        :add_public_dependency(minitl)
                        :add_public_dependency(core)
                        :add_public_dependency(meta)
                        :add_internal_dependency(minizip)
local introspect = Motor.library('motor.introspect', 'motor')
                        :add_public_dependency(config)
                        :add_public_dependency(kernel)
                        :add_public_dependency(minitl)
                        :add_public_dependency(core)
                        :add_public_dependency(meta)
                        :add_public_dependency(filesystem)
local reflection = Motor.library('motor.reflection', 'motor')
                        :add_public_dependency(config)
                        :add_public_dependency(kernel)
                        :add_public_dependency(minitl)
                        :add_public_dependency(core)
                        :add_public_dependency(meta)
                        :add_public_dependency(filesystem)
                        :add_public_dependency(introspect)
local settings = Motor.library('motor.settings', 'motor')
                      :add_public_dependency(config)
                      :add_public_dependency(kernel)
                      :add_public_dependency(minitl)
                      :add_public_dependency(core)
                      :add_public_dependency(meta)
                      :add_public_dependency(filesystem)
                      :add_public_dependency(introspect)
                      :add_public_dependency(reflection)
local resource = Motor.library('motor.resource', 'motor')
                      :add_public_dependency(config)
                      :add_public_dependency(kernel)
                      :add_public_dependency(minitl)
                      :add_public_dependency(core)
                      :add_public_dependency(meta)
                      :add_public_dependency(filesystem)
local scheduler = Motor.library('motor.scheduler', 'motor')
                       :add_public_dependency(config)
                       :add_public_dependency(kernel)
                       :add_public_dependency(minitl)
                       :add_public_dependency(core)
                       :add_public_dependency(meta)
                       :add_public_dependency(filesystem)
                       :add_public_dependency(resource)
                       :add_public_dependency(settings)
local plugin = Motor.library('motor.plugin', 'motor')
                    :add_public_dependency(config)
                    :add_public_dependency(kernel)
                    :add_public_dependency(minitl)
                    :add_public_dependency(core)
                    :add_public_dependency(meta)
                    :add_public_dependency(filesystem)
                    :add_public_dependency(resource)
                    :add_public_dependency(settings)
                    :add_public_dependency(scheduler)
local world = Motor.library('motor.world', 'motor')
                   :add_public_dependency(config)
                   :add_public_dependency(kernel)
                   :add_public_dependency(minitl)
                   :add_public_dependency(core)
                   :add_public_dependency(meta)
                   :add_public_dependency(filesystem)
                   :add_public_dependency(resource)
                   :add_public_dependency(settings)
                   :add_public_dependency(scheduler)
                   :add_public_dependency(plugin)
local motor = Motor.shared_library('motor', 'motor', 'motor/motor')
                   :add_public_dependency(config)
                   :add_public_dependency(kernel)
                   :add_public_dependency(minitl)
                   :add_public_dependency(core)
                   :add_public_dependency(meta)
                   :add_public_dependency(filesystem)
                   :add_public_dependency(introspect)
                   :add_public_dependency(reflection)
                   :add_public_dependency(resource)
                   :add_public_dependency(settings)
                   :add_public_dependency(scheduler)
                   :add_public_dependency(plugin)
                   :add_public_dependency(world)
