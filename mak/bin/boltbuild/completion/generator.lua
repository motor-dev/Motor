---@meta

local function use(var)
    return var
end

---Create a task generator of the specified name.
---@param name string The name of the generator.
---@param features? string|string[] The initial list of features.
---@param env? Environment The default environment to use for tasks generated by this generator.
---@param group? string The group this generator belongs to. If not set, the stage is `Context.fun`.
function Context:__call(name, features, env, group)
    use(name)
    use(features)
    use(env)
    use(group)
    return Generator
end

---Retrieves a generator by its name.
---@param name string The name of the generator to search for
---@return Generator?
function Context:get_generator_by_name(name)
    use(name)
    return nil
end

---Posts a generator. Calls all methods associated with the features, which can in turn post other generators or create tasks.
---@param generator Generator the generator to post. Posting the generator more than once has no effect.
function Context:post(generator)
    use(generator)
end

---@class Generator
---@field name string The name of the generator.
---@field group string The build group this generator belongs to. The group must be declared using `context:declare_group`.
---                    Groups can be shared between different build commands.
---@field env Environment The default environment. Tasks generated from this generator will derive from this environment,
---                       unless another environment is explicitly requested.
Generator = {}

---Create a task that will transform the given inputs into the given outputs.
---@param tool string The name of the tool.
---@param inputs? Node|Node[] The initial list of inputs. Other inputs can be added after the task creation using `Task:add_input`.
---@param outputs? string Node|Node[] The initial list of outputs. Other outputs can be added after the task creation using `Task:add_output`.
---@param env? Environment The default environment to use for tasks generated by this generator.
---@return Task A new task object.
function Generator:__call(tool, inputs, outputs, env)
    use(tool)
    use(inputs)
    use(outputs)
    use(env)
    return Generator
end