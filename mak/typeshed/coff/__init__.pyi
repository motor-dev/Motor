from typing import Dict, List, Optional

IMAGE_FILE_RELOCS_STRIPPED: int = ...
IMAGE_FILE_EXECUTABLE_IMAGE: int = ...
IMAGE_FILE_LINE_NUMS_STRIPPED: int = ...
IMAGE_FILE_LOCAL_SYMS_STRIPPED: int = ...
IMAGE_FILE_AGGRESSIVE_WS_TRIM: int = ...
IMAGE_FILE_LARGE_ADDRESS_AWARE: int = ...
IMAGE_FILE_BYTES_REVERSED_LO: int = ...
IMAGE_FILE_32BIT_MACHINE: int = ...
IMAGE_FILE_DEBUG_STRIPPED: int = ...
IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP: int = ...
IMAGE_FILE_NET_RUN_FROM_SWAP: int = ...
IMAGE_FILE_SYSTEM: int = ...
IMAGE_FILE_DLL: int = ...
IMAGE_FILE_UP_SYSTEM_ONLY: int = ...
IMAGE_FILE_BYTES_REVERSED_HI: int = ...


class CoffHeader(object):
    keywords = ['id', 'numsects', 'timestamp', 'symtab', 'symnums', 'optsize', 'flags']
    headersize = 20

    def __init__(self, data: bytes) -> None:
        self.id: int = ...
        self.numsects: int = ...
        self.timestamp: int = ...
        self.symtab: int = ...
        self.symnums: int = ...
        self.optsize: int = ...
        self.flags: int = ...


class CoffOptHeader(object):
    keywords = ['magic', 'version', 'szexe', 'szdata', 'szbss', 'entry', 'startex', 'startdata']
    headersize = 28

    def __init__(self, data: bytes) -> None:
        self.magic: int = ...
        self.version: int = ...
        self.szexe: int = ...
        self.szdata: int = ...
        self.szbss: int = ...
        self.entry: int = ...
        self.startex: int = ...
        self.startdata: int = ...


IMAGE_SCN_TYPE_NO_PAD: int = ...
IMAGE_SCN_CNT_CODE: int = ...
IMAGE_SCN_CNT_INITIALIZED_DATA: int = ...
IMAGE_SCN_CNT_UNINITIALIZED_DATA: int = ...
IMAGE_SCN_LNK_OTHER: int = ...
IMAGE_SCN_LNK_INFO: int = ...
IMAGE_SCN_LNK_REMOVE: int = ...
IMAGE_SCN_LNK_COMDAT: int = ...
IMAGE_SCN_GPREL: int = ...
IMAGE_SCN_ALIGN_1BYTES: int = ...
IMAGE_SCN_ALIGN_2BYTES: int = ...
IMAGE_SCN_ALIGN_4BYTES: int = ...
IMAGE_SCN_ALIGN_8BYTES: int = ...
IMAGE_SCN_ALIGN_16BYTES: int = ...
IMAGE_SCN_ALIGN_32BYTES: int = ...
IMAGE_SCN_ALIGN_64BYTES: int = ...
IMAGE_SCN_ALIGN_128BYTES: int = ...
IMAGE_SCN_ALIGN_256BYTES: int = ...
IMAGE_SCN_ALIGN_512BYTES: int = ...
IMAGE_SCN_ALIGN_1024BYTES: int = ...
IMAGE_SCN_ALIGN_2048BYTES: int = ...
IMAGE_SCN_ALIGN_4096BYTES: int = ...
IMAGE_SCN_ALIGN_8192BYTES: int = ...
IMAGE_SCN_ALIGN_MASK: int = ...
IMAGE_SCN_LNK_NRELOC_OVFL: int = ...
IMAGE_SCN_MEM_DISCARDABLE: int = ...
IMAGE_SCN_MEM_NOT_CACHED: int = ...
IMAGE_SCN_MEM_NOT_PAGED: int = ...
IMAGE_SCN_MEM_SHARED: int = ...
IMAGE_SCN_MEM_EXECUTE: int = ...
IMAGE_SCN_MEM_READ: int = ...
IMAGE_SCN_MEM_WRITE: int = ...


class CoffSectionHeader(object):
    keywords = ['name', 'paddr', 'vaddr', 'size', 'offdata', 'offrel', 'numrels', 'numlnno', 'lineentries', 'flags']
    headersize = 40

    def __init__(self, data: bytes) -> None:
        self.name: str = ...
        self.paddr: int = ...
        self.vaddr: int = ...
        self.size: int = ...
        self.offdata: int = ...
        self.offrel: int = ...
        self.numrels: int = ...
        self.numlnno: int = ...
        self.lineentries: int = ...
        self.flags: int = ...


IMAGE_SYM_CLASS_END_OF_FUNCTION: int = ...
IMAGE_SYM_CLASS_NULL: int = ...
IMAGE_SYM_CLASS_AUTOMATIC: int = ...
IMAGE_SYM_CLASS_EXTERNAL: int = ...
IMAGE_SYM_CLASS_STATIC: int = ...
IMAGE_SYM_CLASS_REGISTER: int = ...
IMAGE_SYM_CLASS_EXTERNAL_DEF: int = ...
IMAGE_SYM_CLASS_LABEL: int = ...
IMAGE_SYM_CLASS_UNDEFINED_LABEL: int = ...
IMAGE_SYM_CLASS_MEMBER_OF_STRUCT: int = ...
IMAGE_SYM_CLASS_ARGUMENT: int = ...
IMAGE_SYM_CLASS_STRUCT_TAG: int = ...
IMAGE_SYM_CLASS_MEMBER_OF_UNION: int = ...
IMAGE_SYM_CLASS_UNION_TAG: int = ...
IMAGE_SYM_CLASS_TYPE_DEFINITION: int = ...
IMAGE_SYM_CLASS_UNDEFINED_STATIC: int = ...
IMAGE_SYM_CLASS_ENUM_TAG: int = ...
IMAGE_SYM_CLASS_MEMBER_OF_ENUM: int = ...
IMAGE_SYM_CLASS_REGISTER_PARAM: int = ...
IMAGE_SYM_CLASS_BIT_FIELD: int = ...
IMAGE_SYM_CLASS_BLOCK: int = ...
IMAGE_SYM_CLASS_FUNCTION: int = ...
IMAGE_SYM_CLASS_END_OF_STRUCT: int = ...
IMAGE_SYM_CLASS_FILE: int = ...
IMAGE_SYM_CLASS_SECTION: int = ...
IMAGE_SYM_CLASS_WEAK_EXTERNAL: int = ...
IMAGE_SYM_CLASS_CLR_TOKEN: int = ...


class CoffSymtable(object):
    keywords = ['name', 'value', 'sectnum', 'type', 'storagecls', 'numaux']
    headersize = 18

    def __init__(self, data: bytes, symoff: int, stroff: int, strend: int) -> None:
        self.name: str = ...
        self.value: int = ...
        self.sectnum: int = ...
        self.type: int = ...
        self.storagecls: int = ...
        self.numaux: int = ...


IMAGE_REL_AMD64_ABSOLUTE: int = ...
IMAGE_REL_AMD64_ADDR64: int = ...
IMAGE_REL_AMD64_ADDR32: int = ...
IMAGE_REL_AMD64_ADDR32NB: int = ...
IMAGE_REL_AMD64_REL32: int = ...
IMAGE_REL_AMD64_REL32_1: int = ...
IMAGE_REL_AMD64_REL32_2: int = ...
IMAGE_REL_AMD64_REL32_3: int = ...
IMAGE_REL_AMD64_REL32_4: int = ...
IMAGE_REL_AMD64_REL32_5: int = ...
IMAGE_REL_AMD64_SECTION: int = ...
IMAGE_REL_AMD64_SECREL: int = ...
IMAGE_REL_AMD64_SECREL7: int = ...
IMAGE_REL_AMD64_TOKEN: int = ...
IMAGE_REL_AMD64_SREL32: int = ...
IMAGE_REL_AMD64_PAIR: int = ...
IMAGE_REL_AMD64_SSPAN32: int = ...

IMAGE_REL_I386_ABSOLUTE: int = ...
IMAGE_REL_I386_DIR16: int = ...
IMAGE_REL_I386_REL16: int = ...
IMAGE_REL_I386_DIR32: int = ...
IMAGE_REL_I386_DIR32NB: int = ...
IMAGE_REL_I386_SEG12: int = ...
IMAGE_REL_I386_SECTION: int = ...
IMAGE_REL_I386_SECREL: int = ...
IMAGE_REL_I386_TOKEN: int = ...
IMAGE_REL_I386_SECREL7: int = ...
IMAGE_REL_I386_REL32: int = ...


class CoffReloc(object):
    keywords = ['name', 'vaddr', 'type']
    headersize = 10

    def __init__(self, data: bytes, dataoff: int, basesymoff: int, stroff: int, strend: int) -> None:
        self.name: str = ...
        self.vaddr: int = ...
        self.type: int = ...


class Coff(object):
    def __init__(self, fname: Optional[str] = ...) -> None:
        self.fname = fname
        self.header: CoffHeader = ...
        self.opthdr: CoffOptHeader = ...
        self.sections: List[CoffSectionHeader] = ...
        self.relocs: Dict[int, CoffReloc] = ...
        self.symtables: Dict[int, List[CoffSymtable]] = ...
