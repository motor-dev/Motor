from typing import IO, Dict, Iterator, List


class Attribute(object):
    def __init__(self) -> None:
        self.tag: str = ...
        self.value: int = ...


class SubSubSection(object):
    def __init__(self) -> None:
        self.attributes: List[Attribute] = ...


class SubSection(object):
    def __getitem__(self, item: str) -> str:
        ...

    def iter_subsubsections(self) -> Iterator[SubSubSection]:
        ...


class Section(object):
    def __getitem__(self, item: str) -> str:
        ...

    def iter_subsections(self) -> Iterator[SubSection]:
        ...


class Elf_Ehdr(object):
    def __init__(self) -> None:
        self.e_ident: Dict[str, str] = ...
        self.e_type: str = ...
        self.e_machine: str = ...
        self.e_version: str = ...
        self.e_entry: int = ...
        self.e_phoff: int = ...
        self.e_shoff: int = ...
        self.e_flags: int = ...
        self.e_ehsize: int = ...
        self.e_phentsize: int = ...
        self.e_phnum: int = ...
        self.e_shentsize: int = ...
        self.e_shnum: int = ...
        self.e_shstrndx: int = ...


class ELFFile(object):
    def __init__(self, stream: IO[bytes]) -> None:
        self.header: Elf_Ehdr = ...

    def iter_sections(self) -> Iterator[Section]:
        ...
