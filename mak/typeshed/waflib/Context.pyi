import types
import logging
from typing import Any, Dict, List, Optional, Tuple, Type, Union
from .Node import Node
from .Utils import Timer

HEXVERSION: int = ...
WAFVERSION: str = ...
WAFREVISION: str = ...
ABI: int = ...
DBFILE: str = ...
APPNAME: str = ...
VERSION: str = ...
TOP: str = ...
OUT: str = ...
WSCRIPT_FILE: str = ...
launch_dir: str = ...
run_dir: str = ...
top_dir: str = ...
out_dir: str = ...
waf_dir: str = ...

g_module: types.ModuleType = ...

STDOUT: int = ...
STDERR: int = ...
BOTH: int = ...

classes: List[type] = ...


def create_context(cmd_name: str, *k: str, **kw: str) -> "Context":
    pass


class store_context(type):

    def __init__(cls, name: str, bases: Tuple[type, ...], dct: Dict[str, Any]) -> None:
        super(store_context, cls).__init__(name, bases, dct)
        ...


class ctx(object):
    ...


class Context(ctx):
    tools: Dict[str, types.ModuleType] = ...
    cmd: str = ...
    fun: str = ...

    def __init__(self, **kw: Any) -> None:
        self.root: Node = ...
        self.cur_script: Node = ...
        self.path: Node = ...
        self.logger: logging.Logger = ...
        self.timer: Timer = ...

    # Motor addition
    def set_status_line(self, status: str) -> None:
        ...

    def finalize(self) -> None:
        ...

    def load(
            self,
            tool_list: Union[str, List[str]],
            tooldir: Union[str, List[str], None] = ...,
            with_sys_path: bool = ...,
            cache: bool = False
    ) -> None:
        ...

    def execute(self) -> Optional[str]:
        ...

    def pre_recurse(self, node: Node) -> None:
        ...

    def post_recurse(self, node: Node) -> None:
        ...

    def recurse(
            self,
            dirs: Union[str, List[str]],
            name: Optional[str] = ...,
            mandatory: bool = ...,
            once: bool = ...,
            encoding: Optional[str] = ...
    ) -> None:
        ...

    def log_command(self, cmd: Union[str, List[str]], **kw: Any) -> None:
        ...

    def exec_command(self, cmd: Union[str, List[str]], **kw: Any) -> int:
        ...

    def cmd_and_log(self, cmd: Union[str, List[str]], **kw: Any) -> Union[str, Tuple[str, str]]:
        ...

    def fatal(self, msg: str, ex: Optional[Exception] = ...) -> None:
        ...

    def to_log(self, msg: str) -> None:
        ...

    def msg(self, msg: str, result: Union[str, bool], color: Optional[str]) -> None:
        ...

    def start_msg(self, msg: str, quiet: bool = ...) -> None:
        ...

    def end_msg(self, result: Union[str, bool], color: Optional[str] = ..., quiet: bool = ...) -> None:
        ...

    def load_special_tools(self, var: str, ban: List[str] = ...) -> None:
        ...

def load_tool(
        tool: str,
        tooldir: Optional[List[str]]=...,
        ctx:Optional[Context] = ...,
        with_sys_path: bool=...
) -> types.ModuleType:
    ...