from typing import Any, Dict, Iterator, List, Optional, Tuple, Union


class ConfigSet(object):

    def __init__(self, filename: Optional[str] = None) -> None:
        ...

    def __contains__(self, key: str) -> bool:
        ...

    def keys(self) -> List[str]:
        ...

    def __iter__(self) -> Iterator[str]:
        ...

    def __str__(self) -> str:
        ...

    def __getitem__(self, key: str) -> Any:
        ...

    def __setitem__(self, key: str, value: Any) -> None:
        ...

    def __delitem__(self, key: str) -> None:
        ...

    def __getattr__(self, name: str) -> Any:
        ...

    def __setattr__(self, name: str, value: Any) -> None:
        ...

    def __delattr__(self, name: str) -> None:
        ...

    def derive(self) -> "ConfigSet":
        ...

    def detach(self) -> "ConfigSet":
        ...

    def get_flat(self, key: str) -> str:
        ...

    def append_value(self, var: str, val: Union[str, List[Any]]) -> None:
        ...

    def prepend_value(self, var: str, val: Union[str, List[str]]) -> None:
        ...

    def append_unique(self, var: str, val: Union[str, List[str]]) -> None:
        ...

    def get_merged_dict(self) -> Dict[str, Any]:
        ...

    def store(self, filename: str) -> None:
        ...

    def load(self, filename: str) -> None:
        ...

    def update(self, d: Dict[str, Any]) -> None:
        ...

    def stash(self) -> None:
        ...

    def commit(self) -> None:
        ...

    def revert(self) -> None:
        ...
